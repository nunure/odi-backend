#!/usr/bin/env node

/**
 * Module dependencies.
 */
const winston = require("winston");
const mongoose = require("mongoose");

const app = require("../app");
const configMongodb = require("../src/config/mongodb");
const debug = require("debug")("odi-backend:server");
const http = require("http");

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const tmpPort = parseInt(val, 10);

  if (Number.isNaN(tmpPort)) {
    // named pipe
    return val;
  }

  if (tmpPort >= 0) {
    // port number
    return tmpPort;
  }

  return false;
}

/**
 * Connection to mongoDB
 */
function connect() {
  const options = {
    promiseLibrary: global.Promise
  };
  mongoose.Promise = global.Promise;
  mongoose.connect(configMongodb.url, options);
  return mongoose.connection;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const host = "0.0.0.0";

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      winston.error(`${bind} requires elevated privileges`, error);
      process.exit(1);
      break;
    case "EADDRINUSE":
      winston.error(`${bind} is already in use`, error);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Connection
 */
connect()
  .on("error", error => {
    winston.error(
      `Unable to establish connection to ${configMongodb.url}`,
      error
    );
    process.exit(10);
  })
  .on("disconnected", connect)
  .once("open", () => {
    winston.info(`Connection to ${configMongodb.url} established`);
    app.listen(port, host, error => {
      if (error) {
        winston.error(
          `Unable to listen for connections on http://${host}:${port}`,
          error
        );
        process.exit(10);
      }
      winston.info(`Listening for connections on http://${host}:${port}`);
    });
  });
